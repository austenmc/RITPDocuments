// Generated by ts-to-zod
import { z } from "zod";
import { RuleEffect, Categorization } from "./originals/uischema";

export const scopableSchema = z.object({
  scope: z.string().optional(),
});

export const scopedSchema = scopableSchema.extend({
  scope: z.string(),
});

export const labelableSchema = z.object({
  label: z.string().optional(),
});

export const labeledSchema = labelableSchema.extend({
  label: z.string(),
});

export const internationalizableSchema = z.object({
  i18n: z.string().optional(),
});

export const ruleEffectSchema = z.nativeEnum(RuleEffect);

export const conditionSchema = z.object({
  type: z.string().optional(),
});

export const leafConditionSchema = conditionSchema
  .extend(scopedSchema.shape)
  .extend({
    type: z.literal("LEAF"),
    expectedValue: z.any(),
  });

export const composableConditionSchema = conditionSchema.extend({
  conditions: z.array(conditionSchema),
});

export const orConditionSchema = composableConditionSchema.extend({
  type: z.literal("OR"),
});

export const andConditionSchema = composableConditionSchema.extend({
  type: z.literal("AND"),
});

export const labelDescriptionSchema = z.object({
  text: z.string().optional(),
  show: z.boolean().optional(),
});

export const ruleSchema = z.object({
  effect: ruleEffectSchema,
  condition: conditionSchema,
});

export const uISchemaElementSchema = z.object({
  type: z.string(),
  rule: ruleSchema.optional(),
  options: z.record(z.any()).optional(),
});

export const layoutSchema = uISchemaElementSchema.extend({
  elements: z.array(uISchemaElementSchema),
});

export const verticalLayoutSchema = layoutSchema.extend({
  type: z.literal("VerticalLayout"),
});

export const horizontalLayoutSchema = layoutSchema.extend({
  type: z.literal("HorizontalLayout"),
});

export const groupLayoutSchema = layoutSchema
  .extend(labelableSchema.shape)
  .extend(internationalizableSchema.shape)
  .extend({
    type: z.literal("Group"),
  });

export const labelElementSchema = uISchemaElementSchema
  .extend(internationalizableSchema.shape)
  .extend({
    type: z.literal("Label"),
    text: z.string(),
  });

export const controlElementSchema = uISchemaElementSchema
  .extend(scopedSchema.shape)
  .extend(labelableSchema.shape)
  .extend(internationalizableSchema.shape)
  .extend({
    type: z.literal("Control"),
  });

export const categorySchema = layoutSchema
  .extend(labeledSchema.shape)
  .extend(internationalizableSchema.shape)
  .extend({
    type: z.literal("Category"),
  });

export const categorizationSchema: z.ZodSchema<Categorization> = z.lazy(() =>
  uISchemaElementSchema
    .extend(labeledSchema.shape)
    .extend(internationalizableSchema.shape)
    .extend({
      type: z.literal("Categorization"),
      elements: z.array(z.union([categorySchema, categorizationSchema])),
    }),
);
